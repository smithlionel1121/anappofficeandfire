{"version":3,"sources":["context/app-context.js","components/Header/HeaderComponent.jsx","components/Sidebar/SidebarComponent.jsx","components/STRETCH_Cards/CharacterCard.jsx","components/STRETCH_Cards/HouseCard.jsx","components/STRETCH_Cards/BookCard.jsx","components/Feed/FeedComponent.jsx","context/app-actions.js","context/app-reducer.js","api/api.js","context/AppState.js","App.js","index.js"],"names":["AppContext","createContext","HeaderComponent","useContext","dataChoice","toggleSidebar","sidebarOpen","page","params","changeParams","changePage","useState","text","setText","label","charAt","toUpperCase","substring","length","className","Button","color","shape","size","variant","onClick","Heading","textSize","Form","onSubmit","e","preventDefault","name","current","TextInput","placeholder","aria-label","onChange","target","value","TextInputIcon","align","TextInputButton","type","SidebarComponent","filters","changeOption","extraFilters","setExtraFilters","onSelect","selection","RadioButtonGroup","RadioButton","gender","checked","readOnly","rest","isAlive","hasOwnProperty","region","map","hasDiedOut","sidebarStatus","extraFiltersStatus","Dropdown","DropdownTarget","isTarget","DropdownSource","DropdownContext","DropdownMenu","item","DropdownMenuItem","selected","CharacterCard","character","aliases","culture","playedBy","borderRadius","shade","shadow","border","CardContent","textStrong","List","style","ListItem","HouseCard","house","seats","BookCard","book","authors","publisher","mediaType","numberOfPages","country","FeedComponent","list","feedResults","isLoading","pagination","Array","isArray","result","url","slice","lastIndexOf","display","ProgressInfinite","sizeRem","Pagination","currentPage","onPageChange","newPage","totalPages","lastPage","TOGGLE_SIDEBAR","CHANGE_OPTION","TOGGLE_LOADING","UPDATE_RESULTS","UPDATE_PAGINATION","CHANGE_PAGE","CHANGE_PARAMS","reducer","state","action","payload","parseHeaders","res","headers","get","split","reduce","acc","link","props","exec","trim","console","warn","getData","pageInfo","addParams","a","Object","entries","key","fetch","links","json","data","AppState","useReducer","dispatch","updatePagination","toggleLoading","gridClassName","useEffect","last","URL","searchParams","Provider","option","children","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.917804c5.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst AppContext = createContext();\n\nexport default AppContext;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport \"./HeaderComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    Button,\n    Heading,\n    Form,\n    TextInput,\n    TextInputButton,\n    TextInputIcon,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - make sure HeaderComponent is expecting the right props (if any)!\nexport const HeaderComponent = () => {\n    const {\n        dataChoice,\n        toggleSidebar,\n        sidebarOpen,\n        params,\n        page,\n        changeParams,\n        changePage,\n    } = useContext(AppContext);\n    const [text, setText] = useState(\"\");\n\n    const onSubmit = e => {\n        e.preventDefault();\n        changeParams({ name: text });\n        changePage({ ...page, current: 1 });\n        setText(\"\");\n    };\n    let label = `${dataChoice.charAt(0).toUpperCase()}${dataChoice.substring(\n        1,\n        dataChoice.length - 1\n    )} name:`;\n    return (\n        <header className={\"header header-grid\"}>\n            {/* TODO [STRETCH] - add in any controls that you'd like in your header\n             E.g, a search bar, a toggle button for the side bar, or just a plain header!\n        */}\n            <div className=\"headerButton\">\n                <Button\n                    color=\"accent\"\n                    shape=\"rectangle\"\n                    size=\"medium\"\n                    variant=\"primary\"\n                    onClick={() => toggleSidebar()}\n                >\n                    {sidebarOpen ? \"Hide Filters\" : \"Show Filters\"}\n                </Button>\n            </div>\n            <Heading className=\"headerTitle\" textSize=\"display1\">\n                An app of Ice and Fire\n            </Heading>\n            <div className=\"headerSearch\">\n                <Form onSubmit={onSubmit}>\n                    <TextInput\n                        // inlineLabel\n                        placeholder={label}\n                        aria-label=\"Submit\"\n                        onChange={e => setText(e.target.value)}\n                        value={text}\n                    >\n                        <TextInputIcon align=\"left\" name=\"magnify-glass\" />\n                        <TextInputButton\n                            align=\"right\"\n                            name=\"magnify-glass\"\n                            type=\"submit\"\n                        >\n                            Submit\n                        </TextInputButton>\n                    </TextInput>\n                </Form>\n            </div>\n        </header>\n    );\n};\n","import React, { Fragment, useContext, useState } from \"react\";\nimport \"./SidebarComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    SelectOptionGroup,\n    SelectOption,\n    Select,\n    RadioButtonGroup,\n    RadioButton,\n    Dropdown,\n    DropdownTarget,\n    TextInput,\n    TextInputIcon,\n    DropdownSource,\n    DropdownContext,\n    DropdownMenu,\n    DropdownMenuItem,\n    Button,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - make sure SidebarComponent is expecting the right props!\nexport const SidebarComponent = () => {\n    // TODO - reflect expanded/collapsed state in sidebar's className\n    // TODO - make sure the classNames in the SidebarComponent.css match up with the classes you choose!\n    const {\n        sidebarOpen,\n        changeOption,\n        dataChoice,\n        page,\n        params,\n        changePage,\n        changeParams,\n    } = useContext(AppContext);\n\n    const [extraFilters, setExtraFilters] = useState(false);\n\n    const toggleExtraFilters = () => {\n        setExtraFilters(!extraFilters);\n    };\n\n    const items = [5, 10, 15, 20, 25, 50];\n\n    const onSelect = selection => {\n        changeOption(selection);\n        changeParams({});\n        changePage({ ...page, current: 1 });\n    };\n\n    // const onChange = (param) => {\n    //     changeParams({ param: text });\n    //     changePage({ ...page, current: 1 });\n    //     setText(\"\");\n    // };\n\n    // changeParams({...params, isAlive})\n\n    let filters;\n    switch (dataChoice) {\n        case \"characters\":\n            filters = (\n                <Fragment>\n                    <div className=\"radio-group\">\n                        <RadioButtonGroup>\n                            Gender:\n                            <div className=\"radio-options\">\n                                <RadioButton\n                                    name=\"gender\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            gender: \"female\",\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={params.gender === \"female\"}\n                                    readOnly\n                                >\n                                    Female\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"gender\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            gender: \"male\",\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={params.gender === \"male\"}\n                                    readOnly\n                                >\n                                    Male\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"gender\"\n                                    onClick={() => {\n                                        const { gender, ...rest } = params;\n                                        changeParams(rest);\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!params.gender}\n                                    readOnly\n                                >\n                                    Both\n                                </RadioButton>\n                            </div>\n                        </RadioButtonGroup>\n                    </div>\n                    <div className=\"radio-group\">\n                        <RadioButtonGroup className=\"radio-group\">\n                            Alive:\n                            <div className=\"radio-options\">\n                                <RadioButton\n                                    name=\"isAlive\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            isAlive: true,\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!!params.isAlive}\n                                    readOnly\n                                >\n                                    Alive\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"isAlive\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            isAlive: false,\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={\n                                        !params.isAlive &&\n                                        params.hasOwnProperty(\"isAlive\")\n                                    }\n                                    readOnly\n                                >\n                                    Dead\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"isAlive\"\n                                    onClick={() => {\n                                        const { isAlive, ...rest } = params;\n                                        changeParams(rest);\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!params.hasOwnProperty(\"isAlive\")}\n                                    readOnly\n                                >\n                                    Both\n                                </RadioButton>\n                            </div>\n                        </RadioButtonGroup>\n                    </div>\n                </Fragment>\n            );\n\n            break;\n        case \"houses\":\n            let regions = [\n                \"Beyond the Wall\",\n                \"Dorne\",\n                \"Iron Islands\",\n                \"The Crownlands\",\n                \"The Neck\",\n                \"The North\",\n                \"The Reach\",\n                \"The Riverlands\",\n                \"The Stormlands\",\n                \"The Westerlands\",\n                \"The Vale\",\n            ];\n            filters = (\n                <Fragment>\n                    <div className=\"radio-group\">\n                        <RadioButtonGroup>\n                            Regions:\n                            <div className=\"radio-options\">\n                                <RadioButton\n                                    name=\"region\"\n                                    onClick={() => {\n                                        const { region, ...rest } = params;\n                                        changeParams(rest);\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!params.hasOwnProperty(\"region\")}\n                                    readOnly\n                                >\n                                    All\n                                </RadioButton>\n                                {regions.map(region => (\n                                    <RadioButton\n                                        key={region}\n                                        name=\"regions\"\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                region,\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        checked={params.region === region}\n                                        readOnly\n                                    >\n                                        {region}\n                                    </RadioButton>\n                                ))}\n                            </div>\n                        </RadioButtonGroup>\n                    </div>\n\n                    <div className=\"radio-group\">\n                        <RadioButtonGroup className=\"radio-group\">\n                            Status:\n                            <div className=\"radio-options\">\n                                <RadioButton\n                                    name=\"hasDiedOut\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            hasDiedOut: true,\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!!params.hasDiedOut}\n                                    readOnly\n                                >\n                                    Current\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"hasDiedOut\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            hasDiedOut: false,\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={\n                                        !params.hasDiedOut &&\n                                        params.hasOwnProperty(\"hasDiedOut\")\n                                    }\n                                    readOnly\n                                >\n                                    Extinct\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"hasDiedOut\"\n                                    onClick={() => {\n                                        const { hasDiedOut, ...rest } = params;\n                                        changeParams(rest);\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={\n                                        !params.hasOwnProperty(\"hasDiedOut\")\n                                    }\n                                    readOnly\n                                >\n                                    Both\n                                </RadioButton>\n                            </div>\n                        </RadioButtonGroup>\n                    </div>\n                </Fragment>\n            );\n            break;\n        case \"books\":\n            filters = (\n                <Fragment>\n                    <div className=\"radio-group\">\n                        <RadioButtonGroup className=\"radio-group\">\n                            Alive:\n                            <div className=\"radio-options\">\n                                <RadioButton\n                                    name=\"isAlive\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            isAlive: true,\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!!params.isAlive}\n                                    readOnly\n                                >\n                                    Alive\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"isAlive\"\n                                    onClick={() => {\n                                        changeParams({\n                                            ...params,\n                                            isAlive: false,\n                                        });\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={\n                                        !params.isAlive &&\n                                        params.hasOwnProperty(\"isAlive\")\n                                    }\n                                    readOnly\n                                >\n                                    Dead\n                                </RadioButton>\n                                <RadioButton\n                                    name=\"isAlive\"\n                                    onClick={() => {\n                                        const { isAlive, ...rest } = params;\n                                        changeParams(rest);\n                                        changePage({ ...page, current: 1 });\n                                    }}\n                                    checked={!params.hasOwnProperty(\"isAlive\")}\n                                    readOnly\n                                >\n                                    Both\n                                </RadioButton>\n                            </div>\n                        </RadioButtonGroup>\n                    </div>\n                </Fragment>\n            );\n            break;\n    }\n\n    const sidebarStatus = sidebarOpen\n        ? \"app-sidebar expanded\"\n        : \"app-sidebar collapsed\";\n    const extraFiltersStatus = extraFilters ? \"\" : \"collapsed\";\n    return (\n        <div className={`sidebar ${sidebarStatus}`}>\n            {/* TODO - flesh out this component to include all controls for configuring your data retrieval.\n             This must include the category (books/characters/houses)\n             [STRETCH] Feel free to add anything else you want, for example:\n                * a dropdown to select number of items you want to retrieve\n                * a search bar to search for a particular item\n             You could even change what you can see in the search bar based on what you are searching for.\n             E.g add a dropdown to determine which field you're searching on (\"name\"/\"title\"/\"alias\")\n        */}\n            Fetch:\n            <RadioButtonGroup>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"characters\")}\n                    checked={dataChoice === \"characters\"}\n                    readOnly\n                >\n                    Characters\n                </RadioButton>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"houses\")}\n                    checked={dataChoice === \"houses\"}\n                    readOnly\n                >\n                    Houses\n                </RadioButton>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"books\")}\n                    checked={dataChoice === \"books\"}\n                    readOnly\n                >\n                    Books\n                </RadioButton>\n            </RadioButtonGroup>\n            <div className=\"dropdown\">\n                <span>Results per page:</span>\n                <Dropdown>\n                    <DropdownTarget>\n                        <TextInput\n                            isTarget\n                            type=\"number\"\n                            onChange={() => {}}\n                            value={page.size}\n                        >\n                            <TextInputIcon name=\"chevron-down\" />\n                        </TextInput>\n                    </DropdownTarget>\n                    <DropdownSource>\n                        <DropdownContext>\n                            <DropdownMenu>\n                                {items.map(item => (\n                                    <DropdownMenuItem\n                                        key={item}\n                                        onClick={() =>\n                                            changePage({\n                                                ...page,\n                                                current: 1,\n                                                size: item,\n                                            })\n                                        }\n                                        selected={page.size === item}\n                                    >\n                                        {item}\n                                    </DropdownMenuItem>\n                                ))}\n                            </DropdownMenu>\n                        </DropdownContext>\n                    </DropdownSource>\n                </Dropdown>\n            </div>\n            <div className=\"data-filters\">\n                <Button\n                    color=\"accent\"\n                    shape=\"rectangle\"\n                    size=\"small\"\n                    variant=\"secondary\"\n                    onClick={toggleExtraFilters}\n                >\n                    {extraFiltersStatus ? \"More filters\" : \"Less filters\"}\n                </Button>\n\n                <div className={extraFiltersStatus}>{filters}</div>\n            </div>\n        </div>\n    );\n};\n\nlet regions = [\n    \"Dorne\",\n    \"The North\",\n    \"The Reach\",\n    \"The Riverlands\",\n    \"The Westerlands\",\n    \"The Vale\",\n];\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Characters\n\n// TODO - make sure CharacterCard is expecting the right props!\nexport const CharacterCard = ({ character }) => {\n    const { name, aliases, gender, culture, playedBy } = character;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n                <List style=\"none\">\n                    <hr />\n                    {aliases && (\n                        <ListItem>\n                            <b>AKA:</b> <i>{aliases[0]}</i>\n                        </ListItem>\n                    )}\n                    {gender && (\n                        <ListItem>\n                            <b>Gender:</b> <i>{gender}</i>\n                        </ListItem>\n                    )}\n                    {culture && (\n                        <ListItem>\n                            <b>Culture:</b> <i>{culture}</i>\n                        </ListItem>\n                    )}\n                    {playedBy && (\n                        <ListItem>\n                            <b>Played By:</b> <i>{playedBy}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Houses\n\n// TODO - make sure HouseCard is expecting the right props!\nexport const HouseCard = ({ house }) => {\n    const { name, region, seats } = house;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n\n                <List style=\"none\">\n                    <hr />\n                    {region && (\n                        <ListItem>\n                            <b>Region:</b> <i>{region}</i>\n                        </ListItem>\n                    )}\n                    {seats && (\n                        <ListItem>\n                            <b>Seats:</b> <i>{seats}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Books\n\n// TODO - make sure BookCard is expecting the right props!\nexport const BookCard = ({ book }) => {\n    const {\n        name,\n        authors,\n        publisher,\n        mediaType,\n        numberOfPages,\n        country,\n    } = book;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n                <List style=\"none\">\n                    <hr />\n                    {authors && (\n                        <ListItem>\n                            <b>By:</b> <i>{authors[0]}</i>\n                        </ListItem>\n                    )}\n                    {publisher && (\n                        <ListItem>\n                            <b>Publisher:</b> <i>{publisher}</i>\n                        </ListItem>\n                    )}\n                    {mediaType && (\n                        <ListItem>\n                            <b>Media Type:</b> <i>{mediaType}</i>\n                        </ListItem>\n                    )}\n                    {numberOfPages && (\n                        <ListItem>\n                            <b>Number of Pages:</b> <i>{numberOfPages}</i>\n                        </ListItem>\n                    )}\n                    {country && (\n                        <ListItem>\n                            <b>Country:</b> <i>{country}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React, { Fragment, useContext } from \"react\";\nimport \"./FeedComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    CardList,\n    ProgressInfinite,\n    Pagination,\n} from \"@brandwatch/axiom-components\";\nimport { CharacterCard } from \"../STRETCH_Cards/CharacterCard\";\nimport { HouseCard } from \"../STRETCH_Cards/HouseCard\";\nimport { BookCard } from \"../STRETCH_Cards/BookCard\";\n// TODO - make sure FeedComponent is expecting the right props!\nexport const FeedComponent = () => {\n    const {\n        feedResults,\n        isLoading,\n        dataChoice,\n        page,\n        pagination,\n        changePage,\n    } = useContext(AppContext);\n\n    let list;\n    switch (dataChoice) {\n        case \"characters\":\n            list =\n                Array.isArray(feedResults) &&\n                feedResults.map(result => (\n                    <CharacterCard\n                        character={result}\n                        key={result.url.slice(\n                            result.url.lastIndexOf(\n                                \"/\",\n                                result.url.lastIndexOf(\"/\") - 1\n                            ) + 1\n                        )}\n                    />\n                ));\n            break;\n        case \"houses\":\n            list =\n                Array.isArray(feedResults) &&\n                feedResults.map(result => (\n                    <HouseCard\n                        house={result}\n                        key={result.url.slice(\n                            result.url.lastIndexOf(\n                                \"/\",\n                                result.url.lastIndexOf(\"/\") - 1\n                            ) + 1\n                        )}\n                    />\n                ));\n            break;\n        case \"books\":\n            list =\n                Array.isArray(feedResults) &&\n                feedResults.map(result => (\n                    <BookCard\n                        book={result}\n                        key={result.url.slice(\n                            result.url.lastIndexOf(\n                                \"/\",\n                                result.url.lastIndexOf(\"/\") - 1\n                            ) + 1\n                        )}\n                    />\n                ));\n            break;\n    }\n\n    const display = isLoading ? (\n        <ProgressInfinite size=\"large\" sizeRem=\"18rem\" color=\"white\" />\n    ) : (\n        <Fragment>\n            {/* <CardList></CardList> */}\n            <div className=\"card-list\">{list}</div>\n            {pagination && (\n                <Pagination\n                    currentPage={page.current}\n                    onPageChange={newPage =>\n                        changePage({ ...page, current: newPage })\n                    }\n                    totalPages={pagination.lastPage}\n                />\n            )}\n        </Fragment>\n    );\n\n    return (\n        <div className={\"feed\"}>\n            {/* TODO - add a placeholder for an empty feed */}\n            {/* TODO - build up a list of results */}\n            {/* TODO [STRETCH] - update this list to be a list/grid of STRETCH_Cards */}\n            {display}\n        </div>\n    );\n};\n","export const TOGGLE_SIDEBAR = \"TOGGLE_SIDEBAR\";\nexport const CHANGE_OPTION = \"CHANGE_OPTION\";\nexport const TOGGLE_LOADING = \"TOGGLE_LOADING\";\nexport const UPDATE_RESULTS = \"UPDATE_RESULTS\";\nexport const UPDATE_PAGINATION = \"UPDATE_PAGINATION\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const CHANGE_PARAMS = \"CHANGE_PARAMS\";\n","import {\n    TOGGLE_SIDEBAR,\n    CHANGE_OPTION,\n    TOGGLE_LOADING,\n    UPDATE_RESULTS,\n    UPDATE_PAGINATION,\n    CHANGE_PAGE,\n    CHANGE_PARAMS,\n} from \"./app-actions\";\n\nexport default function reducer(state, action) {\n    switch (action.type) {\n        case TOGGLE_SIDEBAR:\n            return { ...state, sidebarOpen: !state.sidebarOpen };\n        case CHANGE_OPTION:\n            return { ...state, dataChoice: action.payload };\n        case TOGGLE_LOADING:\n            return { ...state, isLoading: action.payload };\n        case UPDATE_RESULTS:\n            return { ...state, feedResults: action.payload };\n        case UPDATE_PAGINATION:\n            return { ...state, pagination: action.payload };\n        case CHANGE_PAGE:\n            return { ...state, page: action.payload };\n        case CHANGE_PARAMS:\n            return { ...state, params: action.payload };\n        default:\n            return state;\n    }\n}\n","// Api docs: https://anapioficeandfire.com/Documentation\n\n// TODO create a function that takes a \"field\" argument that fetches one of:\n//  - books\n//  - characters\n//  - houses\n\n// TODO [STRETCH]\n//  customise function (or create another function) to retrieve extra data based on configuration (number of results/pages/search\n\n// // see cheat sheet for fetch example.\nfunction parseHeaders(res) {\n    return res.headers\n        .get(\"link\")\n        .split(\",\")\n        .reduce((acc, link) => {\n            const props = /^\\<(.+)\\>; rel=\"(.+)\"$/.exec(link.trim());\n            if (!props) {\n                console.warn(\"no match\");\n                return acc;\n            }\n            acc[props[2]] = props[1];\n            return acc;\n        }, {});\n}\n\nexport const getData = async (dataChoice, pageInfo, addParams) => {\n    let url = `https://www.anapioficeandfire.com/api/${dataChoice}?page=${pageInfo.current}&pageSize=${pageInfo.size}`;\n    if (addParams) {\n        for (const [key, value] of Object.entries(addParams)) {\n            if (value) {\n                url += `&${key}=${value}`;\n            }\n        }\n    }\n    const res = await fetch(url);\n    const links = parseHeaders(res);\n    const data = await res.json();\n    return [data, links];\n};\n","import React, { useReducer, useEffect, useContext } from \"react\";\nimport AppContext from \"./app-context\";\nimport reducer from \"./app-reducer\";\n\nimport { getData } from \"../api/api\";\n\nimport {\n    TOGGLE_SIDEBAR,\n    CHANGE_OPTION,\n    TOGGLE_LOADING,\n    UPDATE_RESULTS,\n    UPDATE_PAGINATION,\n    CHANGE_PAGE,\n    CHANGE_PARAMS,\n} from \"./app-actions\";\n\nconst AppState = props => {\n    const initialState = {\n        sidebarOpen: true,\n        dataChoice: \"characters\",\n\n        feedResults: null,\n        isLoading: false,\n        pagination: {},\n        page: { current: 1, size: 10 },\n        params: {},\n    };\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const toggleSidebar = () => {\n        dispatch({ type: TOGGLE_SIDEBAR });\n    };\n\n    const changeOption = option => {\n        dispatch({\n            type: CHANGE_OPTION,\n            payload: option,\n        });\n    };\n\n    const updateResults = results => {\n        dispatch({\n            type: UPDATE_RESULTS,\n            payload: results,\n        });\n    };\n\n    const updatePagination = pagination => {\n        dispatch({\n            type: UPDATE_PAGINATION,\n            payload: pagination,\n        });\n    };\n\n    const changePage = page => {\n        dispatch({\n            type: CHANGE_PAGE,\n            payload: page,\n        });\n    };\n\n    const changeParams = params => {\n        dispatch({\n            type: CHANGE_PARAMS,\n            payload: params,\n        });\n    };\n\n    const toggleLoading = isLoading => {\n        dispatch({ type: TOGGLE_LOADING, payload: isLoading });\n    };\n\n    function getPageCount(link) {\n        const url = new URL(link);\n        return url.searchParams.get(\"page\");\n    }\n\n    const {\n        sidebarOpen,\n        isLoading,\n        dataChoice,\n        feedResults,\n        pagination,\n        page,\n        params,\n    } = state;\n\n    const gridClassName = sidebarOpen\n        ? \"grid-container\"\n        : \"grid-container-closed\";\n\n    useEffect(async () => {\n        toggleLoading(true);\n        const [data, links] = await getData(dataChoice, page, params);\n        updateResults(data);\n        const lastPage = getPageCount(links.last);\n        const pagination = { ...links, lastPage };\n        updatePagination(pagination);\n        const { name, ...rest } = params;\n        changeParams(rest);\n        toggleLoading(false);\n    }, [dataChoice, page]);\n\n    return (\n        <AppContext.Provider\n            value={{\n                sidebarOpen,\n                isLoading,\n                dataChoice,\n                feedResults,\n                pagination,\n                page,\n                params,\n                changePage,\n                changeParams,\n                toggleSidebar,\n                changeOption,\n            }}\n        >\n            <div className={`app ${gridClassName}`}>{props.children}</div>\n        </AppContext.Provider>\n    );\n};\n\nexport default AppState;\n","import \"./App.css\";\nimport React from \"react\";\nimport { HeaderComponent } from \"./components/Header/HeaderComponent\";\nimport { SidebarComponent } from \"./components/Sidebar/SidebarComponent\";\nimport { FeedComponent } from \"./components/Feed/FeedComponent\";\nimport AppState from \"./context/AppState\";\n\nfunction App() {\n    // TODO - this is the \"main\" component for our app, and it will include all the global state that we care about\n    //  This should include things like:\n    //  * the sidebar expanded state\n    //  * the selected category (books/characters/houses)\n    //  * the feed results\n\n    // TODO [STRETCH] - This could also include\n    //  * the search term (if there is one)\n    //  * whether the app is fetching data (loading)\n    //  * any additional filters (number of results/filter terms in query string)\n\n    //  Each part of the state will need to be passed down to its respective component(s) in order for it\n    //  to be displayed/updated in the correct part of the UI\n    //  * E.g. maybe you can expand/collapse the sidebar from the header and the feed, as well as the sidebar itself\n    //  This means that the state will need to be accessed/updated from all of these components!\n\n    // To get started:\n    // TODO - add in an expanded state/setState\n    // TODO - add in a feedResults state/setState\n    // (See cheat sheet for useState example)\n\n    // TODO - import getData() from api (you will need to write this function)\n    //         and call it here (setting the results to the feedResults)\n    // TODO [STRETCH] - implement loading state and pass to FeedComponent\n\n    // TODO - pass in expanded sidebar state to components that need to know about it/update it.\n\n    return (\n        <AppState>\n            <HeaderComponent />\n            <div className=\"main\">\n                <SidebarComponent />\n                <FeedComponent />\n            </div>\n        </AppState>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Generated by create-react-app\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}