{"version":3,"sources":["context/app-context.js","components/Header/HeaderComponent.jsx","components/Sidebar/SidebarComponent.jsx","components/STRETCH_Cards/CharacterCard.jsx","components/STRETCH_Cards/HouseCard.jsx","components/STRETCH_Cards/BookCard.jsx","components/Feed/FeedComponent.jsx","context/app-actions.js","context/app-reducer.js","api/api.js","context/AppState.js","App.js","index.js"],"names":["AppContext","createContext","HeaderComponent","useContext","dataChoice","toggleSidebar","sidebarOpen","page","params","changeParams","changePage","useState","text","setText","label","charAt","toUpperCase","substring","length","className","Button","color","shape","size","variant","onClick","Heading","textSize","Form","onSubmit","e","preventDefault","name","current","TextInput","placeholder","aria-label","onChange","target","value","TextInputIcon","align","TextInputButton","type","SidebarComponent","filters","changeOption","extraFilters","setExtraFilters","onSelect","selection","SingleDate","param","appliedDate","Date","selectedDate","setSelectedDate","formattedDate","Intl","DateTimeFormat","year","month","day","format","openDate","style","width","DatePicker","date","onApply","obj","toISOString","onCancel","calendarOpenDate","readOnly","DataPicker","gender","DataPickerDropdown","DropdownMenu","DropdownMenuItem","selected","rest","isAlive","hasOwnProperty","region","map","hasDiedOut","sidebarStatus","extraFiltersStatus","RadioButtonGroup","RadioButton","checked","Dropdown","DropdownTarget","isTarget","DropdownSource","DropdownContext","item","CharacterCard","character","aliases","culture","playedBy","borderRadius","shade","shadow","border","CardContent","textStrong","List","ListItem","Lozenge","HouseCard","house","seats","BookCard","book","authors","publisher","mediaType","numberOfPages","country","released","toLocaleDateString","FeedComponent","list","feedResults","isLoading","pagination","Array","isArray","result","url","slice","lastIndexOf","display","ProgressInfinite","sizeRem","Pagination","currentPage","onPageChange","newPage","totalPages","lastPage","TOGGLE_SIDEBAR","CHANGE_OPTION","TOGGLE_LOADING","UPDATE_RESULTS","UPDATE_PAGINATION","CHANGE_PAGE","CHANGE_PARAMS","reducer","state","action","payload","parseHeaders","res","headers","get","split","reduce","acc","link","props","exec","trim","console","warn","getData","pageInfo","addParams","a","Object","entries","key","fetch","links","json","data","AppState","useReducer","dispatch","updatePagination","toggleLoading","gridClassName","useEffect","last","URL","searchParams","Provider","option","children","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10107df7.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst AppContext = createContext();\n\nexport default AppContext;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport \"./HeaderComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    Button,\n    Heading,\n    Form,\n    TextInput,\n    TextInputButton,\n    TextInputIcon,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - make sure HeaderComponent is expecting the right props (if any)!\nexport const HeaderComponent = () => {\n    const {\n        dataChoice,\n        toggleSidebar,\n        sidebarOpen,\n        params,\n        page,\n        changeParams,\n        changePage,\n    } = useContext(AppContext);\n    const [text, setText] = useState(\"\");\n\n    const onSubmit = e => {\n        e.preventDefault();\n        changeParams({ name: text });\n        changePage({ ...page, current: 1 });\n        setText(\"\");\n    };\n    let label = `${dataChoice.charAt(0).toUpperCase()}${dataChoice.substring(\n        1,\n        dataChoice.length - 1\n    )} name:`;\n    return (\n        <header className={\"header header-grid\"}>\n            {/* TODO [STRETCH] - add in any controls that you'd like in your header\n             E.g, a search bar, a toggle button for the side bar, or just a plain header!\n        */}\n            <div className=\"headerButton\">\n                <Button\n                    color=\"accent\"\n                    shape=\"rectangle\"\n                    size=\"medium\"\n                    variant=\"primary\"\n                    onClick={() => toggleSidebar()}\n                >\n                    {sidebarOpen ? \"Hide Filters\" : \"Show Filters\"}\n                </Button>\n            </div>\n            <Heading className=\"headerTitle\" textSize=\"display1\">\n                An app of Ice and Fire\n            </Heading>\n            <div className=\"headerSearch\">\n                <Form onSubmit={onSubmit}>\n                    <TextInput\n                        // inlineLabel\n                        placeholder={label}\n                        aria-label=\"Submit\"\n                        onChange={e => setText(e.target.value)}\n                        value={text}\n                    >\n                        <TextInputIcon align=\"left\" name=\"magnify-glass\" />\n                        <TextInputButton\n                            align=\"right\"\n                            name=\"magnify-glass\"\n                            type=\"submit\"\n                        >\n                            Submit\n                        </TextInputButton>\n                    </TextInput>\n                </Form>\n            </div>\n        </header>\n    );\n};\n","import React, { Fragment, useContext, useState, useEffect } from \"react\";\nimport \"./SidebarComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    DatePicker,\n    DataPickerDropdown,\n    DataPicker,\n    RadioButtonGroup,\n    RadioButton,\n    Dropdown,\n    DropdownTarget,\n    TextInput,\n    TextInputIcon,\n    DropdownSource,\n    DropdownContext,\n    DropdownMenu,\n    DropdownMenuItem,\n    Button,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - make sure SidebarComponent is expecting the right props!\nexport const SidebarComponent = () => {\n    // TODO - reflect expanded/collapsed state in sidebar's className\n    // TODO - make sure the classNames in the SidebarComponent.css match up with the classes you choose!\n    const {\n        sidebarOpen,\n        changeOption,\n        dataChoice,\n        page,\n        params,\n        changePage,\n        changeParams,\n    } = useContext(AppContext);\n\n    const [extraFilters, setExtraFilters] = useState(false);\n\n    const toggleExtraFilters = () => {\n        setExtraFilters(!extraFilters);\n    };\n\n    const items = [5, 10, 15, 20, 25, 50];\n    let regions = [\n        \"Beyond the Wall\",\n        \"Dorne\",\n        \"Iron Islands\",\n        \"The Crownlands\",\n        \"The Neck\",\n        \"The North\",\n        \"The Reach\",\n        \"The Riverlands\",\n        \"The Stormlands\",\n        \"The Westerlands\",\n        \"The Vale\",\n    ];\n\n    const onSelect = selection => {\n        changeOption(selection);\n        changeParams({});\n        changePage({ ...page, current: 1 });\n    };\n\n    function SingleDate({ label, param }) {\n        const appliedDate = params[param] ? new Date(params[param]) : null;\n        const [selectedDate, setSelectedDate] = useState(null);\n\n        let formattedDate = null;\n\n        if (appliedDate) {\n            formattedDate = new Intl.DateTimeFormat(\"default\", {\n                year: \"numeric\",\n                month: \"numeric\",\n                day: \"numeric\",\n            }).format(appliedDate);\n        }\n\n        let openDate = new Date(\"01-01-2005\");\n\n        return (\n            <div style={{ width: \"100px\" }}>\n                <DatePicker\n                    onSelect={({ date }) => {\n                        setSelectedDate(date);\n                    }}\n                    onApply={() => {\n                        let obj = params;\n                        obj[param] = new Date(selectedDate).toISOString();\n                        changeParams({\n                            ...obj,\n                        });\n                        changePage({ ...page, current: 1 });\n                    }}\n                    onCancel={() => {\n                        setSelectedDate(appliedDate);\n                    }}\n                    selectedDate={selectedDate}\n                    calendarOpenDate={openDate}\n                >\n                    <TextInput\n                        label={label}\n                        value={formattedDate || \"\"}\n                        placeholder=\"dd/mm/yy\"\n                        readOnly\n                    />\n                </DatePicker>\n            </div>\n        );\n    }\n\n    let filters;\n    switch (dataChoice) {\n        case \"characters\":\n            filters = (\n                <Fragment>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.gender\n                                    ? `${params.gender\n                                          .charAt(0)\n                                          .toUpperCase()}${params.gender.substring(\n                                          1\n                                      )}`\n                                    : \"Pick a Gender\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                gender: \"female\",\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={params.gender === \"female\"}\n                                    >\n                                        Female\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                gender: \"male\",\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={params.gender === \"male\"}\n                                    >\n                                        Male\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const { gender, ...rest } = params;\n                                            changeParams(rest);\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.isAlive\n                                    ? \"Alive\"\n                                    : params.hasOwnProperty(\"isAlive\")\n                                    ? \"Dead\"\n                                    : \"Pick a Living Status\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                isAlive: true,\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={!!params.isAlive}\n                                    >\n                                        Alive\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                isAlive: false,\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={\n                                            !params.isAlive &&\n                                            params.hasOwnProperty(\"isAlive\")\n                                        }\n                                    >\n                                        Dead\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const { isAlive, ...rest } = params;\n                                            changeParams(rest);\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                </Fragment>\n            );\n            break;\n        case \"houses\":\n            filters = (\n                <Fragment>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.region\n                                    ? params.region\n                                    : \"Pick a Region\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    {regions.map(region => (\n                                        <DropdownMenuItem\n                                            key={region}\n                                            onClick={() => {\n                                                changeParams({\n                                                    ...params,\n                                                    region,\n                                                });\n                                                changePage({\n                                                    ...page,\n                                                    current: 1,\n                                                });\n                                            }}\n                                        >\n                                            {region}\n                                        </DropdownMenuItem>\n                                    ))}\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const { region, ...rest } = params;\n                                            changeParams(rest);\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.hasDiedOut\n                                    ? \"Current\"\n                                    : params.hasOwnProperty(\"hasDiedOut\")\n                                    ? \"Extinct\"\n                                    : \"Pick a Living Status\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                hasDiedOut: true,\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={!!params.hasDiedOut}\n                                    >\n                                        Current\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            changeParams({\n                                                ...params,\n                                                hasDiedOut: false,\n                                            });\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={\n                                            !params.hasDiedOut &&\n                                            params.hasOwnProperty(\"hasDiedOut\")\n                                        }\n                                    >\n                                        Extinct\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const {\n                                                hasDiedOut,\n                                                ...rest\n                                            } = params;\n                                            changeParams(rest);\n                                            changePage({ ...page, current: 1 });\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                </Fragment>\n            );\n            break;\n        case \"books\":\n            filters = (\n                <Fragment>\n                    <div className=\"filter-group\">\n                        <div className=\"filter-options\">\n                            <SingleDate\n                                label=\"From Release Date:\"\n                                param=\"fromReleaseDate\"\n                            />\n                            <SingleDate\n                                label=\"To Release Date:\"\n                                param=\"toReleaseDate\"\n                            />\n                            <br />\n                            <Button\n                                color=\"negative\"\n                                shape=\"rectangle\"\n                                size=\"small\"\n                                variant=\"secondary\"\n                                onClick={() => {\n                                    changeParams({});\n                                    changePage({ ...page, current: 1 });\n                                }}\n                            >\n                                Reset\n                            </Button>\n                        </div>\n                    </div>\n                </Fragment>\n            );\n            break;\n    }\n\n    const sidebarStatus = sidebarOpen\n        ? \"app-sidebar expanded\"\n        : \"app-sidebar collapsed\";\n    const extraFiltersStatus = extraFilters ? \"\" : \"collapsed\";\n    return (\n        <div className={`sidebar ${sidebarStatus}`}>\n            {/* TODO - flesh out this component to include all controls for configuring your data retrieval.\n             This must include the category (books/characters/houses)\n             [STRETCH] Feel free to add anything else you want, for example:\n                * a dropdown to select number of items you want to retrieve\n                * a search bar to search for a particular item\n             You could even change what you can see in the search bar based on what you are searching for.\n             E.g add a dropdown to determine which field you're searching on (\"name\"/\"title\"/\"alias\")\n        */}\n            Fetch:\n            <RadioButtonGroup>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"characters\")}\n                    checked={dataChoice === \"characters\"}\n                    readOnly\n                >\n                    Characters\n                </RadioButton>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"houses\")}\n                    checked={dataChoice === \"houses\"}\n                    readOnly\n                >\n                    Houses\n                </RadioButton>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"books\")}\n                    checked={dataChoice === \"books\"}\n                    readOnly\n                >\n                    Books\n                </RadioButton>\n            </RadioButtonGroup>\n            <div className=\"dropdown\">\n                <span>Results per page:</span>\n                <Dropdown>\n                    <DropdownTarget>\n                        <TextInput\n                            isTarget\n                            type=\"number\"\n                            onChange={() => {}}\n                            value={page.size}\n                        >\n                            <TextInputIcon name=\"chevron-down\" />\n                        </TextInput>\n                    </DropdownTarget>\n                    <DropdownSource>\n                        <DropdownContext>\n                            <DropdownMenu>\n                                {items.map(item => (\n                                    <DropdownMenuItem\n                                        key={item}\n                                        onClick={() =>\n                                            changePage({\n                                                ...page,\n                                                current: 1,\n                                                size: item,\n                                            })\n                                        }\n                                        selected={page.size === item}\n                                    >\n                                        {item}\n                                    </DropdownMenuItem>\n                                ))}\n                            </DropdownMenu>\n                        </DropdownContext>\n                    </DropdownSource>\n                </Dropdown>\n            </div>\n            <div className=\"data-filters\">\n                <Button\n                    color=\"accent\"\n                    shape=\"rectangle\"\n                    size=\"small\"\n                    variant=\"secondary\"\n                    onClick={toggleExtraFilters}\n                >\n                    {extraFiltersStatus ? \"More filters\" : \"Less filters\"}\n                </Button>\n\n                <div className={extraFiltersStatus}>{filters}</div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n    Lozenge,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Characters\n\n// TODO - make sure CharacterCard is expecting the right props!\nexport const CharacterCard = ({ character, params }) => {\n    const { name, aliases, gender, culture, playedBy } = character;\n    let isAlive;\n    if (params.hasOwnProperty(\"isAlive\")) {\n        isAlive = params.isAlive;\n    }\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n                <List style=\"none\">\n                    <hr />\n                    {aliases && (\n                        <ListItem>\n                            <b>AKA:</b> <i>{aliases[0]}</i>\n                        </ListItem>\n                    )}\n                    {gender && (\n                        <ListItem>\n                            <b>Gender:</b> <i>{gender}</i>\n                        </ListItem>\n                    )}\n                    {culture && (\n                        <ListItem>\n                            <b>Culture:</b> <i>{culture}</i>\n                        </ListItem>\n                    )}\n                    {playedBy && (\n                        <ListItem>\n                            <b>Played By:</b> <i>{playedBy}</i>\n                        </ListItem>\n                    )}\n                    {isAlive && <Lozenge color=\"terra-form\">Is Alive</Lozenge>}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Houses\n\n// TODO - make sure HouseCard is expecting the right props!\nexport const HouseCard = ({ house }) => {\n    const { name, region, seats } = house;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n\n                <List style=\"none\">\n                    <hr />\n                    {region && (\n                        <ListItem>\n                            <b>Region:</b> <i>{region}</i>\n                        </ListItem>\n                    )}\n                    {seats && (\n                        <ListItem>\n                            <b>Seats:</b> <i>{seats}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Books\n\n// TODO - make sure BookCard is expecting the right props!\nexport const BookCard = ({ book }) => {\n    const {\n        name,\n        authors,\n        publisher,\n        mediaType,\n        numberOfPages,\n        country,\n        released,\n    } = book;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n                <List style=\"none\">\n                    <hr />\n                    {authors && (\n                        <ListItem>\n                            <b>By:</b> <i>{authors[0]}</i>\n                        </ListItem>\n                    )}\n                    {publisher && (\n                        <ListItem>\n                            <b>Publisher:</b> <i>{publisher}</i>\n                        </ListItem>\n                    )}\n                    {mediaType && (\n                        <ListItem>\n                            <b>Media Type:</b> <i>{mediaType}</i>\n                        </ListItem>\n                    )}\n                    {numberOfPages && (\n                        <ListItem>\n                            <b>Number of Pages:</b> <i>{numberOfPages}</i>\n                        </ListItem>\n                    )}\n                    {released && (\n                        <ListItem>\n                            <b>Release Date:</b>\n                            <i>{new Date(released).toLocaleDateString()}</i>\n                        </ListItem>\n                    )}\n                    {country && (\n                        <ListItem>\n                            <b>Country:</b> <i>{country}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React, { Fragment, useContext } from \"react\";\nimport \"./FeedComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    CardList,\n    ProgressInfinite,\n    Pagination,\n} from \"@brandwatch/axiom-components\";\nimport { CharacterCard } from \"../STRETCH_Cards/CharacterCard\";\nimport { HouseCard } from \"../STRETCH_Cards/HouseCard\";\nimport { BookCard } from \"../STRETCH_Cards/BookCard\";\n// TODO - make sure FeedComponent is expecting the right props!\nexport const FeedComponent = () => {\n    const {\n        feedResults,\n        isLoading,\n        dataChoice,\n        page,\n        params,\n        pagination,\n        changePage,\n    } = useContext(AppContext);\n\n    let list;\n    switch (dataChoice) {\n        case \"characters\":\n            list =\n                Array.isArray(feedResults) &&\n                feedResults.map(result => (\n                    <CharacterCard\n                        character={result}\n                        params={params}\n                        key={result.url.slice(\n                            result.url.lastIndexOf(\n                                \"/\",\n                                result.url.lastIndexOf(\"/\") - 1\n                            ) + 1\n                        )}\n                    />\n                ));\n            break;\n        case \"houses\":\n            list =\n                Array.isArray(feedResults) &&\n                feedResults.map(result => (\n                    <HouseCard\n                        house={result}\n                        key={result.url.slice(\n                            result.url.lastIndexOf(\n                                \"/\",\n                                result.url.lastIndexOf(\"/\") - 1\n                            ) + 1\n                        )}\n                    />\n                ));\n            break;\n        case \"books\":\n            list =\n                Array.isArray(feedResults) &&\n                feedResults.map(result => (\n                    <BookCard\n                        book={result}\n                        key={result.url.slice(\n                            result.url.lastIndexOf(\n                                \"/\",\n                                result.url.lastIndexOf(\"/\") - 1\n                            ) + 1\n                        )}\n                    />\n                ));\n            break;\n    }\n\n    const display = isLoading ? (\n        <ProgressInfinite size=\"large\" sizeRem=\"18rem\" color=\"white\" />\n    ) : (\n        <Fragment>\n            <div className=\"card-list\">{list}</div>\n            {pagination && (\n                <Pagination\n                    currentPage={page.current}\n                    onPageChange={newPage =>\n                        changePage({ ...page, current: newPage })\n                    }\n                    totalPages={pagination.lastPage}\n                />\n            )}\n        </Fragment>\n    );\n\n    return (\n        <div className={\"feed\"}>\n            {/* TODO - add a placeholder for an empty feed */}\n            {/* TODO - build up a list of results */}\n            {/* TODO [STRETCH] - update this list to be a list/grid of STRETCH_Cards */}\n            {display}\n        </div>\n    );\n};\n","export const TOGGLE_SIDEBAR = \"TOGGLE_SIDEBAR\";\nexport const CHANGE_OPTION = \"CHANGE_OPTION\";\nexport const TOGGLE_LOADING = \"TOGGLE_LOADING\";\nexport const UPDATE_RESULTS = \"UPDATE_RESULTS\";\nexport const UPDATE_PAGINATION = \"UPDATE_PAGINATION\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const CHANGE_PARAMS = \"CHANGE_PARAMS\";\n","import {\n    TOGGLE_SIDEBAR,\n    CHANGE_OPTION,\n    TOGGLE_LOADING,\n    UPDATE_RESULTS,\n    UPDATE_PAGINATION,\n    CHANGE_PAGE,\n    CHANGE_PARAMS,\n} from \"./app-actions\";\n\nexport default function reducer(state, action) {\n    switch (action.type) {\n        case TOGGLE_SIDEBAR:\n            return { ...state, sidebarOpen: !state.sidebarOpen };\n        case CHANGE_OPTION:\n            return { ...state, dataChoice: action.payload };\n        case TOGGLE_LOADING:\n            return { ...state, isLoading: action.payload };\n        case UPDATE_RESULTS:\n            return { ...state, feedResults: action.payload };\n        case UPDATE_PAGINATION:\n            return { ...state, pagination: action.payload };\n        case CHANGE_PAGE:\n            return { ...state, page: action.payload };\n        case CHANGE_PARAMS:\n            return { ...state, params: action.payload };\n        default:\n            return state;\n    }\n}\n","// Api docs: https://anapioficeandfire.com/Documentation\n\n// TODO create a function that takes a \"field\" argument that fetches one of:\n//  - books\n//  - characters\n//  - houses\n\n// TODO [STRETCH]\n//  customise function (or create another function) to retrieve extra data based on configuration (number of results/pages/search\n\n// // see cheat sheet for fetch example.\nfunction parseHeaders(res) {\n    return res.headers\n        .get(\"link\")\n        .split(\",\")\n        .reduce((acc, link) => {\n            const props = /^\\<(.+)\\>; rel=\"(.+)\"$/.exec(link.trim());\n            if (!props) {\n                console.warn(\"no match\");\n                return acc;\n            }\n            acc[props[2]] = props[1];\n            return acc;\n        }, {});\n}\n\nexport const getData = async (dataChoice, pageInfo, addParams) => {\n    let url = `https://www.anapioficeandfire.com/api/${dataChoice}?page=${pageInfo.current}&pageSize=${pageInfo.size}`;\n    if (addParams) {\n        for (const [key, value] of Object.entries(addParams)) {\n            if (value) {\n                url += `&${key}=${value}`;\n            }\n        }\n    }\n    const res = await fetch(url);\n    const links = parseHeaders(res);\n    const data = await res.json();\n    return [data, links];\n};\n","import React, { useReducer, useEffect } from \"react\";\nimport AppContext from \"./app-context\";\nimport reducer from \"./app-reducer\";\n\nimport { getData } from \"../api/api\";\n\nimport {\n    TOGGLE_SIDEBAR,\n    CHANGE_OPTION,\n    TOGGLE_LOADING,\n    UPDATE_RESULTS,\n    UPDATE_PAGINATION,\n    CHANGE_PAGE,\n    CHANGE_PARAMS,\n} from \"./app-actions\";\n\nconst AppState = props => {\n    const initialState = {\n        sidebarOpen: true,\n        dataChoice: \"characters\",\n\n        feedResults: null,\n        isLoading: false,\n        pagination: {},\n        page: { current: 1, size: 10 },\n        params: {},\n    };\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const toggleSidebar = () => {\n        dispatch({ type: TOGGLE_SIDEBAR });\n    };\n\n    const changeOption = option => {\n        dispatch({\n            type: CHANGE_OPTION,\n            payload: option,\n        });\n    };\n\n    const updateResults = results => {\n        dispatch({\n            type: UPDATE_RESULTS,\n            payload: results,\n        });\n    };\n\n    const updatePagination = pagination => {\n        dispatch({\n            type: UPDATE_PAGINATION,\n            payload: pagination,\n        });\n    };\n\n    const changePage = page => {\n        dispatch({\n            type: CHANGE_PAGE,\n            payload: page,\n        });\n    };\n\n    const changeParams = params => {\n        dispatch({\n            type: CHANGE_PARAMS,\n            payload: params,\n        });\n    };\n\n    const toggleLoading = isLoading => {\n        dispatch({ type: TOGGLE_LOADING, payload: isLoading });\n    };\n\n    function getPageCount(link) {\n        const url = new URL(link);\n        return url.searchParams.get(\"page\");\n    }\n\n    const {\n        sidebarOpen,\n        isLoading,\n        dataChoice,\n        feedResults,\n        pagination,\n        page,\n        params,\n    } = state;\n\n    const gridClassName = sidebarOpen\n        ? \"grid-container\"\n        : \"grid-container-closed\";\n\n    useEffect(async () => {\n        toggleLoading(true);\n        const [data, links] = await getData(dataChoice, page, params);\n        updateResults(data);\n        const lastPage = getPageCount(links.last);\n        const pagination = { ...links, lastPage };\n        updatePagination(pagination);\n        const { name, ...rest } = params;\n        changeParams(rest);\n        toggleLoading(false);\n    }, [dataChoice, page]);\n\n    return (\n        <AppContext.Provider\n            value={{\n                sidebarOpen,\n                isLoading,\n                dataChoice,\n                feedResults,\n                pagination,\n                page,\n                params,\n                changePage,\n                changeParams,\n                toggleSidebar,\n                changeOption,\n            }}\n        >\n            <div className={`app ${gridClassName}`}>{props.children}</div>\n        </AppContext.Provider>\n    );\n};\n\nexport default AppState;\n","import \"./App.css\";\nimport React from \"react\";\nimport { HeaderComponent } from \"./components/Header/HeaderComponent\";\nimport { SidebarComponent } from \"./components/Sidebar/SidebarComponent\";\nimport { FeedComponent } from \"./components/Feed/FeedComponent\";\nimport AppState from \"./context/AppState\";\n\nfunction App() {\n    // TODO - this is the \"main\" component for our app, and it will include all the global state that we care about\n    //  This should include things like:\n    //  * the sidebar expanded state\n    //  * the selected category (books/characters/houses)\n    //  * the feed results\n\n    // TODO [STRETCH] - This could also include\n    //  * the search term (if there is one)\n    //  * whether the app is fetching data (loading)\n    //  * any additional filters (number of results/filter terms in query string)\n\n    //  Each part of the state will need to be passed down to its respective component(s) in order for it\n    //  to be displayed/updated in the correct part of the UI\n    //  * E.g. maybe you can expand/collapse the sidebar from the header and the feed, as well as the sidebar itself\n    //  This means that the state will need to be accessed/updated from all of these components!\n\n    // To get started:\n    // TODO - add in an expanded state/setState\n    // TODO - add in a feedResults state/setState\n    // (See cheat sheet for useState example)\n\n    // TODO - import getData() from api (you will need to write this function)\n    //         and call it here (setting the results to the feedResults)\n    // TODO [STRETCH] - implement loading state and pass to FeedComponent\n\n    // TODO - pass in expanded sidebar state to components that need to know about it/update it.\n\n    return (\n        <AppState>\n            <HeaderComponent />\n            <div className=\"main\">\n                <SidebarComponent />\n                <FeedComponent />\n            </div>\n        </AppState>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Generated by create-react-app\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}