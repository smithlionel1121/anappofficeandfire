{"version":3,"sources":["context/app-context.js","components/Header/HeaderComponent.jsx","components/Sidebar/SidebarComponent.jsx","components/STRETCH_Cards/CharacterCard.jsx","components/STRETCH_Cards/HouseCard.jsx","components/STRETCH_Cards/BookCard.jsx","components/Feed/FeedComponent.jsx","context/app-actions.js","context/app-reducer.js","api/api.js","context/AppState.js","App.js","index.js"],"names":["AppContext","createContext","HeaderComponent","useContext","dataChoice","toggleSidebar","sidebarOpen","params","changeParams","useState","text","setText","label","charAt","toUpperCase","substring","length","className","Button","color","shape","size","variant","onClick","Heading","textSize","Form","onSubmit","e","preventDefault","page","current","filters","name","TextInput","placeholder","aria-label","onChange","target","value","TextInputIcon","align","TextInputButton","type","SidebarComponent","changeOption","changePage","extraFilters","setExtraFilters","onSelect","selection","onFilter","newFilter","prevFilters","clearFilter","SingleDate","param","appliedDate","Date","selectedDate","setSelectedDate","formattedDate","Intl","DateTimeFormat","year","month","day","format","openDate","style","width","DatePicker","date","onApply","obj","toISOString","onCancel","calendarOpenDate","readOnly","DataPicker","gender","DataPickerDropdown","DropdownMenu","DropdownMenuItem","selected","rest","isAlive","hasOwnProperty","region","map","hasDiedOut","sidebarStatus","extraFiltersStatus","RadioButtonGroup","RadioButton","checked","Dropdown","DropdownTarget","isTarget","DropdownSource","DropdownContext","item","CharacterCard","character","aliases","culture","playedBy","died","borderRadius","shade","shadow","border","CardContent","textStrong","List","ListItem","Lozenge","HouseCard","house","seats","BookCard","book","authors","publisher","mediaType","numberOfPages","country","released","toLocaleDateString","FeedComponent","list","feedResults","isLoading","pagination","makeKey","url","slice","lastIndexOf","noResults","result","display","ProgressInfinite","sizeRem","Pagination","currentPage","onPageChange","newPage","lastPage","totalPages","TOGGLE_SIDEBAR","CHANGE_OPTION","TOGGLE_LOADING","UPDATE_RESULTS","UPDATE_PAGINATION","CHANGE_PAGE","CHANGE_FILTERS","CHANGE_PARAMS","reducer","state","action","payload","parseHeaders","res","headers","get","split","reduce","acc","link","props","exec","trim","console","warn","getData","a","Object","entries","key","fetch","links","json","data","AppState","useReducer","dispatch","updatePagination","toggleLoading","getPageCount","URL","Number","searchParams","gridClassName","useEffect","last","fetchData","Provider","changeFilters","option","children","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb3fb352.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst AppContext = createContext();\n\nexport default AppContext;\n","import React, { useContext, useState } from \"react\";\nimport \"./HeaderComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    Button,\n    Heading,\n    Form,\n    TextInput,\n    TextInputButton,\n    TextInputIcon,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - make sure HeaderComponent is expecting the right props (if any)!\nexport const HeaderComponent = () => {\n    const {\n        dataChoice,\n        toggleSidebar,\n        sidebarOpen,\n        params,\n        changeParams,\n    } = useContext(AppContext);\n    const [text, setText] = useState(\"\");\n\n    const onSubmit = e => {\n        e.preventDefault();\n        changeParams({\n            page: { ...params.page, current: 1 },\n            filters: { name: text },\n        });\n        setText(\"\");\n    };\n    let label = `${dataChoice.charAt(0).toUpperCase()}${dataChoice.substring(\n        1,\n        dataChoice.length - 1\n    )} name:`;\n    return (\n        <header className={\"header header-grid\"}>\n            {/* TODO [STRETCH] - add in any controls that you'd like in your header\n             E.g, a search bar, a toggle button for the side bar, or just a plain header!\n        */}\n            <div className=\"headerButton\">\n                <Button\n                    color=\"accent\"\n                    shape=\"rectangle\"\n                    size=\"medium\"\n                    variant=\"primary\"\n                    onClick={() => toggleSidebar()}\n                >\n                    {sidebarOpen ? \"Hide Filters\" : \"Show Filters\"}\n                </Button>\n            </div>\n            <Heading className=\"headerTitle\" textSize=\"display1\">\n                An app of Ice and Fire\n            </Heading>\n            <div className=\"headerSearch\">\n                <Form onSubmit={onSubmit}>\n                    <TextInput\n                        placeholder={label}\n                        aria-label=\"Submit\"\n                        onChange={e => setText(e.target.value)}\n                        value={text}\n                    >\n                        <TextInputIcon align=\"left\" name=\"magnify-glass\" />\n                        <TextInputButton\n                            align=\"right\"\n                            name=\"magnify-glass\"\n                            type=\"submit\"\n                        >\n                            Submit\n                        </TextInputButton>\n                    </TextInput>\n                </Form>\n            </div>\n        </header>\n    );\n};\n","import React, { Fragment, useContext, useState } from \"react\";\nimport \"./SidebarComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport {\n    DatePicker,\n    DataPickerDropdown,\n    DataPicker,\n    RadioButtonGroup,\n    RadioButton,\n    Dropdown,\n    DropdownTarget,\n    TextInput,\n    TextInputIcon,\n    DropdownSource,\n    DropdownContext,\n    DropdownMenu,\n    DropdownMenuItem,\n    Button,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - make sure SidebarComponent is expecting the right props!\nexport const SidebarComponent = () => {\n    // TODO - reflect expanded/collapsed state in sidebar's className\n    // TODO - make sure the classNames in the SidebarComponent.css match up with the classes you choose!\n    const {\n        sidebarOpen,\n        changeOption,\n        dataChoice,\n        params,\n        changePage,\n        changeParams,\n    } = useContext(AppContext);\n\n    const [extraFilters, setExtraFilters] = useState(false);\n\n    const toggleExtraFilters = () => {\n        setExtraFilters(!extraFilters);\n    };\n\n    const items = [5, 10, 15, 20, 25, 50];\n    let regions = [\n        \"Beyond the Wall\",\n        \"Dorne\",\n        \"Iron Islands\",\n        \"The Crownlands\",\n        \"The Neck\",\n        \"The North\",\n        \"The Reach\",\n        \"The Riverlands\",\n        \"The Stormlands\",\n        \"The Westerlands\",\n        \"The Vale\",\n    ];\n\n    const onSelect = selection => {\n        changeOption(selection);\n        changeParams({\n            page: { ...params.page, current: 1 },\n            filters: {},\n        });\n    };\n\n    const onFilter = newFilter => {\n        const { name, ...prevFilters } = params.filters;\n        changeParams({\n            page: { ...params.page, current: 1 },\n            filters: { ...prevFilters, ...newFilter },\n        });\n    };\n\n    const clearFilter = newFilter => {\n        changeParams({\n            page: { ...params.page, current: 1 },\n            filters: { ...newFilter },\n        });\n    };\n\n    function SingleDate({ label, param }) {\n        const appliedDate = params.filters[param]\n            ? new Date(params.filters[param])\n            : null;\n        const [selectedDate, setSelectedDate] = useState(null);\n\n        let formattedDate = null;\n\n        if (appliedDate) {\n            formattedDate = new Intl.DateTimeFormat(\"default\", {\n                year: \"numeric\",\n                month: \"numeric\",\n                day: \"numeric\",\n            }).format(appliedDate);\n        }\n\n        let openDate = new Date(\"01-01-2005\");\n\n        return (\n            <div style={{ width: \"100px\" }}>\n                <DatePicker\n                    onSelect={({ date }) => {\n                        setSelectedDate(date);\n                    }}\n                    onApply={() => {\n                        let obj = params.filters;\n                        obj[param] = new Date(selectedDate).toISOString();\n                        changeParams({\n                            page: { ...params.page, current: 1 },\n                            filters: { ...obj },\n                        });\n                    }}\n                    onCancel={() => {\n                        setSelectedDate(appliedDate);\n                    }}\n                    selectedDate={selectedDate}\n                    calendarOpenDate={openDate}\n                >\n                    <TextInput\n                        label={label}\n                        value={formattedDate || \"\"}\n                        placeholder=\"dd/mm/yy\"\n                        readOnly\n                    />\n                </DatePicker>\n            </div>\n        );\n    }\n\n    let filters;\n    switch (dataChoice) {\n        case \"characters\":\n            filters = (\n                <Fragment>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.filters.gender\n                                    ? `${params.filters.gender\n                                          .charAt(0)\n                                          .toUpperCase()}${params.filters.gender.substring(\n                                          1\n                                      )}`\n                                    : \"Pick a Gender\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            onFilter({ gender: \"female\" });\n                                        }}\n                                        selected={\n                                            params.filters.gender === \"female\"\n                                        }\n                                    >\n                                        Female\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            onFilter({ gender: \"male\" });\n                                        }}\n                                        selected={\n                                            params.filters.gender === \"male\"\n                                        }\n                                    >\n                                        Male\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const {\n                                                gender,\n                                                ...rest\n                                            } = params.filters;\n                                            clearFilter(rest);\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.filters.isAlive\n                                    ? \"Alive\"\n                                    : params.filters.hasOwnProperty(\"isAlive\")\n                                    ? \"Dead\"\n                                    : \"Pick a Living Status\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            onFilter({ isAlive: true });\n                                        }}\n                                        selected={!!params.filters.isAlive}\n                                    >\n                                        Alive\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() =>\n                                            onFilter({ isAlive: false })\n                                        }\n                                        selected={\n                                            !params.filters.isAlive &&\n                                            params.filters.hasOwnProperty(\n                                                \"isAlive\"\n                                            )\n                                        }\n                                    >\n                                        Dead\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const {\n                                                isAlive,\n                                                ...rest\n                                            } = params.filters;\n                                            clearFilter(rest);\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                </Fragment>\n            );\n            break;\n        case \"houses\":\n            filters = (\n                <Fragment>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.filters.region\n                                    ? params.filters.region\n                                    : \"Pick a Region\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    {regions.map(region => (\n                                        <DropdownMenuItem\n                                            key={region}\n                                            onClick={() => onFilter({ region })}\n                                        >\n                                            {region}\n                                        </DropdownMenuItem>\n                                    ))}\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const {\n                                                region,\n                                                ...rest\n                                            } = params.filters;\n                                            clearFilter(rest);\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                    <div className=\"filter-group\">\n                        <DataPicker\n                            placeholder={\n                                !!params.filters.hasDiedOut\n                                    ? \"Current\"\n                                    : params.filters.hasOwnProperty(\n                                          \"hasDiedOut\"\n                                      )\n                                    ? \"Extinct\"\n                                    : \"Pick a Living Status\"\n                            }\n                        >\n                            <DataPickerDropdown>\n                                <DropdownMenu>\n                                    <DropdownMenuItem\n                                        onClick={() =>\n                                            onFilter({ hasDiedOut: true })\n                                        }\n                                        selected={!!params.filters.hasDiedOut}\n                                    >\n                                        Current\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() =>\n                                            onFilter({ hasDiedOut: false })\n                                        }\n                                        selected={\n                                            !params.filters.hasDiedOut &&\n                                            params.filters.hasOwnProperty(\n                                                \"hasDiedOut\"\n                                            )\n                                        }\n                                    >\n                                        Extinct\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        onClick={() => {\n                                            const {\n                                                hasDiedOut,\n                                                ...rest\n                                            } = params.filters;\n                                            clearFilter(rest);\n                                        }}\n                                        selected={false}\n                                    >\n                                        Clear\n                                    </DropdownMenuItem>\n                                </DropdownMenu>\n                            </DataPickerDropdown>\n                        </DataPicker>\n                    </div>\n                </Fragment>\n            );\n            break;\n        case \"books\":\n            filters = (\n                <Fragment>\n                    <div className=\"filter-group\">\n                        <div className=\"filter-options\">\n                            <SingleDate\n                                label=\"From Release Date:\"\n                                param=\"fromReleaseDate\"\n                            />\n                            <SingleDate\n                                label=\"To Release Date:\"\n                                param=\"toReleaseDate\"\n                            />\n                            <br />\n                            <Button\n                                color=\"negative\"\n                                shape=\"rectangle\"\n                                size=\"small\"\n                                variant=\"secondary\"\n                                onClick={() => {\n                                    const empty = {};\n                                    clearFilter(empty);\n                                }}\n                            >\n                                Reset\n                            </Button>\n                        </div>\n                    </div>\n                </Fragment>\n            );\n            break;\n        default:\n        // no filters\n    }\n\n    const sidebarStatus = sidebarOpen\n        ? \"app-sidebar expanded\"\n        : \"app-sidebar collapsed\";\n    const extraFiltersStatus = extraFilters ? \"\" : \"collapsed\";\n    return (\n        <div className={`sidebar ${sidebarStatus}`}>\n            {/* TODO - flesh out this component to include all controls for configuring your data retrieval.\n             This must include the category (books/characters/houses)\n             [STRETCH] Feel free to add anything else you want, for example:\n                * a dropdown to select number of items you want to retrieve\n                * a search bar to search for a particular item\n             You could even change what you can see in the search bar based on what you are searching for.\n             E.g add a dropdown to determine which field you're searching on (\"name\"/\"title\"/\"alias\")\n        */}\n            Fetch:\n            <RadioButtonGroup>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"characters\")}\n                    checked={dataChoice === \"characters\"}\n                    readOnly\n                >\n                    Characters\n                </RadioButton>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"houses\")}\n                    checked={dataChoice === \"houses\"}\n                    readOnly\n                >\n                    Houses\n                </RadioButton>\n                <RadioButton\n                    name=\"data\"\n                    onClick={() => onSelect(\"books\")}\n                    checked={dataChoice === \"books\"}\n                    readOnly\n                >\n                    Books\n                </RadioButton>\n            </RadioButtonGroup>\n            <div className=\"dropdown\">\n                <span>Results per page:</span>\n                <Dropdown>\n                    <DropdownTarget>\n                        <TextInput\n                            isTarget\n                            type=\"number\"\n                            onChange={() => {}}\n                            value={params.page.size}\n                        >\n                            <TextInputIcon name=\"chevron-down\" />\n                        </TextInput>\n                    </DropdownTarget>\n                    <DropdownSource>\n                        <DropdownContext>\n                            <DropdownMenu>\n                                {items.map(item => (\n                                    <DropdownMenuItem\n                                        key={item}\n                                        onClick={() =>\n                                            changePage({\n                                                ...params.page,\n                                                current: 1,\n                                                size: item,\n                                            })\n                                        }\n                                        selected={params.page.size === item}\n                                    >\n                                        {item}\n                                    </DropdownMenuItem>\n                                ))}\n                            </DropdownMenu>\n                        </DropdownContext>\n                    </DropdownSource>\n                </Dropdown>\n            </div>\n            <div className=\"data-filters\">\n                <Button\n                    color=\"accent\"\n                    shape=\"rectangle\"\n                    size=\"small\"\n                    variant=\"secondary\"\n                    onClick={toggleExtraFilters}\n                >\n                    {extraFiltersStatus ? \"More filters\" : \"Less filters\"}\n                </Button>\n\n                <div className={extraFiltersStatus}>{filters}</div>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n    Lozenge,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Characters\n\n// TODO - make sure CharacterCard is expecting the right props!\nexport const CharacterCard = ({ character, params }) => {\n    const { aliases, gender, culture, playedBy, died } = character;\n    const name = character.name ? character.name : aliases[0];\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n                {/* eslint-disable-next-line react/style-prop-object */}\n                <List style=\"none\">\n                    <hr />\n                    {aliases && (\n                        <ListItem>\n                            <b>AKA:</b> <i>{aliases[0]}</i>\n                        </ListItem>\n                    )}\n                    {gender && (\n                        <ListItem>\n                            <b>Gender:</b> <i>{gender}</i>\n                        </ListItem>\n                    )}\n                    {culture && (\n                        <ListItem>\n                            <b>Culture:</b> <i>{culture}</i>\n                        </ListItem>\n                    )}\n                    {playedBy && (\n                        <ListItem>\n                            <b>Played By:</b> <i>{playedBy}</i>\n                        </ListItem>\n                    )}\n                    {params.filters.hasOwnProperty(\"isAlive\") ? (\n                        params.filters.isAlive ? (\n                            <Lozenge color=\"terra-form\">Alive</Lozenge>\n                        ) : (\n                            <Lozenge color=\"critical-mass\">\n                                Died: {died}\n                            </Lozenge>\n                        )\n                    ) : null}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Houses\n\n// TODO - make sure HouseCard is expecting the right props!\nexport const HouseCard = ({ house }) => {\n    const { name, region, seats } = house;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n\n                {/* eslint-disable-next-line react/style-prop-object */}\n                <List style=\"none\">\n                    <hr />\n                    {region && (\n                        <ListItem>\n                            <b>Region:</b> <i>{region}</i>\n                        </ListItem>\n                    )}\n                    {seats && (\n                        <ListItem>\n                            <b>Seats:</b> <i>{seats}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nimport {\n    Card,\n    CardContent,\n    Heading,\n    List,\n    ListItem,\n} from \"@brandwatch/axiom-components\";\n\n// TODO - create a component which displays information about Books\n\n// TODO - make sure BookCard is expecting the right props!\nexport const BookCard = ({ book }) => {\n    const {\n        name,\n        authors,\n        publisher,\n        mediaType,\n        numberOfPages,\n        country,\n        released,\n    } = book;\n    return (\n        <Card\n            className=\"card\"\n            borderRadius=\"large\"\n            shade=\"shade-3\"\n            size=\"medium\"\n            shadow\n            border\n        >\n            <CardContent>\n                {name && <Heading textStrong>{name}</Heading>}\n                {/* eslint-disable-next-line react/style-prop-object */}\n                <List style=\"none\">\n                    <hr />\n                    {authors && (\n                        <ListItem>\n                            <b>By:</b> <i>{authors[0]}</i>\n                        </ListItem>\n                    )}\n                    {publisher && (\n                        <ListItem>\n                            <b>Publisher:</b> <i>{publisher}</i>\n                        </ListItem>\n                    )}\n                    {mediaType && (\n                        <ListItem>\n                            <b>Media Type:</b> <i>{mediaType}</i>\n                        </ListItem>\n                    )}\n                    {numberOfPages && (\n                        <ListItem>\n                            <b>Number of Pages:</b> <i>{numberOfPages}</i>\n                        </ListItem>\n                    )}\n                    {released && (\n                        <ListItem>\n                            <b>Release Date:</b>\n                            <i>{new Date(released).toLocaleDateString()}</i>\n                        </ListItem>\n                    )}\n                    {country && (\n                        <ListItem>\n                            <b>Country:</b> <i>{country}</i>\n                        </ListItem>\n                    )}\n                </List>\n            </CardContent>\n        </Card>\n    );\n};\n","import React, { Fragment, useContext } from \"react\";\nimport \"./FeedComponent.css\";\n\nimport AppContext from \"../../context/app-context\";\n\nimport { ProgressInfinite, Pagination } from \"@brandwatch/axiom-components\";\nimport { CharacterCard } from \"../STRETCH_Cards/CharacterCard\";\nimport { HouseCard } from \"../STRETCH_Cards/HouseCard\";\nimport { BookCard } from \"../STRETCH_Cards/BookCard\";\n// TODO - make sure FeedComponent is expecting the right props!\nexport const FeedComponent = () => {\n    const {\n        feedResults,\n        isLoading,\n        dataChoice,\n        params,\n        pagination,\n        changePage,\n    } = useContext(AppContext);\n\n    let list;\n    const makeKey = url =>\n        url.slice(url.lastIndexOf(\"/\", url.lastIndexOf(\"/\") - 1) + 1);\n\n    const noResults = <div>No Results Found</div>;\n\n    switch (dataChoice) {\n        case \"characters\":\n            list = feedResults?.length\n                ? feedResults.map(result => (\n                      <CharacterCard\n                          character={result}\n                          params={params}\n                          key={makeKey(result.url)}\n                      />\n                  ))\n                : noResults;\n            break;\n        case \"houses\":\n            list = feedResults?.length\n                ? feedResults.map(result => (\n                      <HouseCard house={result} key={makeKey(result.url)} />\n                  ))\n                : noResults;\n            break;\n        case \"books\":\n            list = feedResults?.length\n                ? feedResults.map(result => (\n                      <BookCard book={result} key={makeKey(result.url)} />\n                  ))\n                : noResults;\n            break;\n        default:\n            list = noResults;\n    }\n\n    const display = isLoading ? (\n        <ProgressInfinite size=\"large\" sizeRem=\"18rem\" color=\"white\" />\n    ) : (\n        <Fragment>\n            <div className=\"card-list\">{list}</div>\n            {pagination && (\n                <Pagination\n                    currentPage={params.page.current}\n                    onPageChange={newPage => {\n                        if (newPage <= pagination.lastPage)\n                            changePage({ ...params.page, current: newPage });\n                    }}\n                    totalPages={pagination.lastPage}\n                />\n            )}\n        </Fragment>\n    );\n\n    return (\n        <div className={\"feed\"}>\n            {/* TODO - add a placeholder for an empty feed */}\n            {/* TODO - build up a list of results */}\n            {/* TODO [STRETCH] - update this list to be a list/grid of STRETCH_Cards */}\n            {display}\n        </div>\n    );\n};\n","export const TOGGLE_SIDEBAR = \"TOGGLE_SIDEBAR\";\nexport const CHANGE_OPTION = \"CHANGE_OPTION\";\nexport const TOGGLE_LOADING = \"TOGGLE_LOADING\";\nexport const UPDATE_RESULTS = \"UPDATE_RESULTS\";\nexport const UPDATE_PAGINATION = \"UPDATE_PAGINATION\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const CHANGE_FILTERS = \"CHANGE_FILTERS\";\nexport const CHANGE_PARAMS = \"CHANGE_PARAMS\";\n","import {\n    TOGGLE_SIDEBAR,\n    CHANGE_OPTION,\n    TOGGLE_LOADING,\n    UPDATE_RESULTS,\n    UPDATE_PAGINATION,\n    CHANGE_PAGE,\n    CHANGE_FILTERS,\n    CHANGE_PARAMS,\n} from \"./app-actions\";\n\nexport default function reducer(state, action) {\n    switch (action.type) {\n        case TOGGLE_SIDEBAR:\n            return { ...state, sidebarOpen: !state.sidebarOpen };\n        case CHANGE_OPTION:\n            return { ...state, dataChoice: action.payload };\n        case TOGGLE_LOADING:\n            return { ...state, isLoading: action.payload };\n        case UPDATE_RESULTS:\n            return {\n                ...state,\n                feedResults: action.payload,\n            };\n        case UPDATE_PAGINATION:\n            return { ...state, pagination: action.payload };\n        case CHANGE_PAGE:\n            return {\n                ...state,\n                params: { ...state.params, page: action.payload },\n            };\n        case CHANGE_FILTERS:\n            return {\n                ...state,\n                params: { ...state.params, filters: action.payload },\n            };\n        case CHANGE_PARAMS:\n            return { ...state, params: action.payload };\n        default:\n            return state;\n    }\n}\n","// Api docs: https://anapioficeandfire.com/Documentation\n\n// TODO create a function that takes a \"field\" argument that fetches one of:\n//  - books\n//  - characters\n//  - houses\n\n// TODO [STRETCH]\n//  customise function (or create another function) to retrieve extra data based on configuration (number of results/pages/search\n\n// // see cheat sheet for fetch example.\nfunction parseHeaders(res) {\n    return res.headers\n        .get(\"link\")\n        .split(\",\")\n        .reduce((acc, link) => {\n            const props = /^<(.+)>; rel=\"(.+)\"$/.exec(link.trim());\n            if (!props) {\n                console.warn(\"no match\");\n                return acc;\n            }\n            acc[props[2]] = props[1];\n            return acc;\n        }, {});\n}\n\nexport const getData = async (dataChoice, { page, filters }) => {\n    const { current, size } = page;\n    let url = `https://www.anapioficeandfire.com/api/${dataChoice}?page=${current}&pageSize=${size}`;\n    if (filters) {\n        for (const [key, value] of Object.entries(filters)) {\n            url += `&${key}=${value}`;\n        }\n    }\n    const res = await fetch(url);\n    const links = parseHeaders(res);\n    const data = await res.json();\n    return [data, links];\n};\n","import React, { useReducer, useEffect } from \"react\";\nimport AppContext from \"./app-context\";\nimport reducer from \"./app-reducer\";\n\nimport { getData } from \"../api/api\";\n\nimport {\n    TOGGLE_SIDEBAR,\n    CHANGE_OPTION,\n    TOGGLE_LOADING,\n    UPDATE_RESULTS,\n    UPDATE_PAGINATION,\n    CHANGE_PAGE,\n    CHANGE_FILTERS,\n    CHANGE_PARAMS,\n} from \"./app-actions\";\n\nconst AppState = props => {\n    const initialState = {\n        sidebarOpen: true,\n        dataChoice: \"characters\",\n\n        feedResults: null,\n        isLoading: false,\n        pagination: {},\n        params: {\n            page: { current: 1, size: 10 },\n            filters: {},\n        },\n    };\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const toggleSidebar = () => {\n        dispatch({ type: TOGGLE_SIDEBAR });\n    };\n\n    const changeOption = option => {\n        dispatch({\n            type: CHANGE_OPTION,\n            payload: option,\n        });\n    };\n\n    const updateResults = results => {\n        dispatch({\n            type: UPDATE_RESULTS,\n            payload: results,\n        });\n    };\n\n    const updatePagination = pagination => {\n        dispatch({\n            type: UPDATE_PAGINATION,\n            payload: pagination,\n        });\n    };\n\n    const changePage = page => {\n        dispatch({\n            type: CHANGE_PAGE,\n            payload: page,\n        });\n    };\n\n    const changeFilters = filters => {\n        dispatch({\n            type: CHANGE_FILTERS,\n            payload: filters,\n        });\n    };\n\n    const changeParams = params => {\n        dispatch({\n            type: CHANGE_PARAMS,\n            payload: params,\n        });\n    };\n\n    const toggleLoading = isLoading => {\n        dispatch({ type: TOGGLE_LOADING, payload: isLoading });\n    };\n\n    function getPageCount(link) {\n        const url = new URL(link);\n        return Number(url.searchParams.get(\"page\"));\n    }\n\n    const {\n        sidebarOpen,\n        isLoading,\n        dataChoice,\n        feedResults,\n        pagination,\n        params,\n    } = state;\n\n    const gridClassName = sidebarOpen\n        ? \"grid-container\"\n        : \"grid-container-closed\";\n\n    useEffect(() => {\n        const fetchData = async () => {\n            toggleLoading(true);\n            const [data, links] = await getData(dataChoice, params);\n            updateResults(data);\n            const lastPage = getPageCount(links.last);\n            const pagination = { ...links, lastPage };\n            updatePagination(pagination);\n            toggleLoading(false);\n        };\n        fetchData();\n    }, [dataChoice, params]);\n\n    return (\n        <AppContext.Provider\n            value={{\n                sidebarOpen,\n                isLoading,\n                dataChoice,\n                feedResults,\n                pagination,\n                params,\n                changePage,\n                changeParams,\n                changeFilters,\n                toggleSidebar,\n                changeOption,\n            }}\n        >\n            <div className={`app ${gridClassName}`}>{props.children}</div>\n        </AppContext.Provider>\n    );\n};\n\nexport default AppState;\n","import \"./App.css\";\nimport React from \"react\";\nimport { HeaderComponent } from \"./components/Header/HeaderComponent\";\nimport { SidebarComponent } from \"./components/Sidebar/SidebarComponent\";\nimport { FeedComponent } from \"./components/Feed/FeedComponent\";\nimport AppState from \"./context/AppState\";\n\nfunction App() {\n    // TODO - this is the \"main\" component for our app, and it will include all the global state that we care about\n    //  This should include things like:\n    //  * the sidebar expanded state\n    //  * the selected category (books/characters/houses)\n    //  * the feed results\n\n    // TODO [STRETCH] - This could also include\n    //  * the search term (if there is one)\n    //  * whether the app is fetching data (loading)\n    //  * any additional filters (number of results/filter terms in query string)\n\n    //  Each part of the state will need to be passed down to its respective component(s) in order for it\n    //  to be displayed/updated in the correct part of the UI\n    //  * E.g. maybe you can expand/collapse the sidebar from the header and the feed, as well as the sidebar itself\n    //  This means that the state will need to be accessed/updated from all of these components!\n\n    // To get started:\n    // TODO - add in an expanded state/setState\n    // TODO - add in a feedResults state/setState\n    // (See cheat sheet for useState example)\n\n    // TODO - import getData() from api (you will need to write this function)\n    //         and call it here (setting the results to the feedResults)\n    // TODO [STRETCH] - implement loading state and pass to FeedComponent\n\n    // TODO - pass in expanded sidebar state to components that need to know about it/update it.\n\n    return (\n        <AppState>\n            <HeaderComponent />\n            <div className=\"main\">\n                <SidebarComponent />\n                <FeedComponent />\n            </div>\n        </AppState>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Generated by create-react-app\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}